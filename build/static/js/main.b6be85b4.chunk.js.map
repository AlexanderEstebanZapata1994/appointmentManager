{"version":3,"sources":["components/Form/index.js","components/Form/Form.js","components/Appointment/index.js","components/Appointment/Appointment.js","components/AppointmentList/index.js","components/AppointmentList/AppointmentList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Form","withStyles","theme","root","padding","spacing","createTitle","marginTop","textAlign","input","margin","classes","createAppointment","useState","buttonDisabled","setButtonDisabled","error","setError","petName","ownerPetName","date","time","sicknesses","appointment","setAppointment","handleChangeEvent","evt","name","target","value","handleBlurEvent","trim","length","Paper","elevation","Typography","variant","className","onSubmit","preventDefault","id","uuid","FormControl","FormHelperText","Grid","item","xs","TextField","type","label","placeholder","aria-describedby","size","onChange","onBlur","TextareaAutosize","rowsMin","Button","disabled","color","Appointment","flexGrow","maxWidth","backgroundColor","palette","background","paper","sicknessesText","handleDeleteAction","Box","List","dense","ListItem","ListItemText","key","primary","secondary","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","AppointmentList","appointmentList","updateAppointmentListState","appointmentId","newAppointmentList","filter","component","map","App","initialAppointments","JSON","parse","localStorage","getItem","setAppointmentList","useEffect","setItem","stringify","align","style","fontSize","Container","container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b6be85b4.chunk.js","sourcesContent":["import { FormComponent } from \"./Form\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = (theme) => ({\r\n    root : {\r\n        padding: theme.spacing(4)\r\n    },\r\n    createTitle: {\r\n        marginTop: theme.spacing(2),\r\n        textAlign: 'center'\r\n    },\r\n    input: {\r\n        margin: theme.spacing(1)\r\n    }\r\n})\r\n\r\nexport const Form = withStyles (styles) (FormComponent) ","import React, { useState } from 'react';\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { Grid, FormControl, TextField, Typography, Paper, FormHelperText, TextareaAutosize, Button} from \"@material-ui/core\";\r\n\r\nconst FormComponent = ({classes, createAppointment}) => {\r\n    \r\n    const [buttonDisabled, setButtonDisabled] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [appointment, setAppointment] = useState({\r\n        petName: '',\r\n        ownerPetName: '',\r\n        date: '',\r\n        time: '',\r\n        sicknesses: ''\r\n    });\r\n\r\n    const handleChangeEvent = evt =>{\r\n        const { name }  = evt.target;\r\n        const { value }  = evt.target;\r\n\r\n        setAppointment( {...appointment, [name]: value})\r\n    }\r\n\r\n    const handleBlurEvent = evt =>{\r\n        if (appointment.petName.trim().length === 0 || appointment.ownerPetName.trim().length === 0) {\r\n            setButtonDisabled( true );\r\n            setError( true ); \r\n            return;\r\n        }\r\n\r\n        setError( false ); \r\n        setButtonDisabled( false );\r\n    }\r\n    \r\n    const handleSubmitEvent = evt =>{\r\n        evt.preventDefault();\r\n\r\n        //Asign an id\r\n        appointment.id = uuid();\r\n        \r\n        //Create the appointment\r\n        createAppointment(appointment);\r\n\r\n        //Restart the form\r\n        setAppointment({\r\n            petName: '',\r\n            ownerPetName: '',\r\n            date: '',\r\n            time: '',\r\n            sicknesses: ''\r\n        })\r\n        setButtonDisabled( true );\r\n    }\r\n\r\n    const {petName, ownerPetName, date, time, sicknesses } = appointment;\r\n    return ( \r\n        <>\r\n            <Paper elevation={1} >\r\n                <Typography variant='h6' className={classes.createTitle}>Create new appointment</Typography>\r\n                <form onSubmit={handleSubmitEvent} >\r\n                    <FormControl error={error} variant='filled' className={classes.root}>\r\n                    {error && <FormHelperText>All fields are required</FormHelperText>}\r\n                        <Grid item xs={12}>\r\n                            <TextField \r\n                                id='petName' \r\n                                name=\"petName\" \r\n                                type='text' \r\n                                label='Pet Name'\r\n                                placeholder='Type your pet name'\r\n                                aria-describedby=\"my-helper-text-pet-name\"\r\n                                variant='outlined'\r\n                                className={classes.input}\r\n                                size='small'\r\n                                onChange={handleChangeEvent}\r\n                                onBlur={handleBlurEvent}\r\n                                value={petName}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <TextField \r\n                                id='ownerPetName' \r\n                                name=\"ownerPetName\" \r\n                                type='text' \r\n                                label='Owner name'\r\n                                placeholder='Type the owners name'\r\n                                aria-describedby=\"my-helper-text-owner-pet-name\"\r\n                                variant='outlined'\r\n                                className={classes.input}\r\n                                size='small'\r\n                                onChange={handleChangeEvent}\r\n                                onBlur={handleBlurEvent}\r\n                                value={ownerPetName}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <TextField \r\n                                id='date' \r\n                                name=\"date\" \r\n                                type='date' \r\n                                aria-describedby=\"my-helper-text-date\"\r\n                                variant='filled'\r\n                                className={classes.input}\r\n                                size='small'\r\n                                onChange={handleChangeEvent}\r\n                                value={date}\r\n                            />\r\n                        </Grid>\r\n                        \r\n                        <Grid item xs={12}>\r\n                            <TextField \r\n                                id='time' \r\n                                name=\"time\" \r\n                                type='time' \r\n                                aria-describedby=\"my-helper-text-time\"\r\n                                variant='filled'\r\n                                className={classes.input}\r\n                                size='small'\r\n                                onChange={handleChangeEvent}\r\n                                value={time}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextareaAutosize\r\n                                name='sicknesses'\r\n                                rowsMin={5}\r\n                                placeholder=\"Sicknesses\"\r\n                                size='small'\r\n                                onChange={handleChangeEvent}\r\n                                value={sicknesses}\r\n                                />\r\n                        </Grid>\r\n                        <Button disabled={buttonDisabled} type='submit' variant='contained' color='primary'>\r\n                            Add appointment\r\n                        </Button>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </>\r\n     );\r\n}\r\n \r\nexport { FormComponent };","import { AppointmentComponent } from \"./Appointment\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: '10px',\r\n        flexGrow: 1,\r\n        maxWidth: 752,\r\n        backgroundColor: theme.palette.background.paper\r\n    }, \r\n    sicknessesText: {\r\n        backgroundColor: '#ffcdcd',\r\n        color: '#b10000'\r\n    }\r\n    \r\n})\r\n\r\nexport const Appointment = withStyles (styles) (AppointmentComponent)","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//We import the MUI Components\r\nimport { List, ListItem, ListItemText, IconButton, Box, ListItemSecondaryAction, Typography } from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\nconst AppointmentComponent = ({appointment, classes, handleDeleteAction}) => {\r\n    const { petName, ownerPetName, date, time, sicknesses }= appointment;\r\n    return ( \r\n        <Box className={classes.root}>\r\n            <List dense={false}>\r\n                <ListItem>\r\n                  <ListItemText\r\n                    key=\"1\"\r\n                    primary={`Pet name: ${ petName ? petName : '' }`}\r\n                    secondary={`Owner: ${ ownerPetName ? ownerPetName :'' }`}\r\n                  />\r\n                  <ListItemText\r\n                    key=\"2\"\r\n                    primary={`Date: ${ date ? date : '' } `}\r\n                    secondary={`Time: ${ time ? time : ''} `}\r\n                  />\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleDeleteAction(appointment.id)}>\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                  \r\n                </ListItem>\r\n                {sicknesses && <Typography className={classes.sicknessesText}>{`Sicknesses: ${sicknesses}`}</Typography>}\r\n            </List>\r\n        </Box>\r\n    );\r\n}\r\n\r\nAppointmentComponent.propTypes = {\r\n    appointment: PropTypes.object.isRequired,\r\n    handleDeleteAction: PropTypes.func.isRequired\r\n}\r\n \r\nexport { AppointmentComponent };","import { AppointmentListComponent } from \"./AppointmentList\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = () => ({\r\n    root: {\r\n        color: 'blue'\r\n    }\r\n})\r\n\r\nexport const AppointmentList = withStyles (styles) (AppointmentListComponent)","import React from 'react';\r\n\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport { Appointment } from \"../Appointment\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AppointmentListComponent = ({appointmentList, updateAppointmentListState, classes}) => {\r\n\r\n    const handleDeleteAction = appointmentId => {\r\n        const newAppointmentList = appointmentList.filter(appointment => appointment.id !== appointmentId)\r\n        updateAppointmentListState(newAppointmentList)\r\n    }\r\n    return ( \r\n        <Box>\r\n            {appointmentList.length === 0 \r\n            ? <Typography component=\"h1\">There is not appointments yet</Typography> \r\n            : <Typography component=\"h1\">Admin</Typography>}\r\n            \r\n            {appointmentList.map(appointment => (\r\n                    <Box>\r\n                        <Appointment key={appointment.id} appointment={appointment} handleDeleteAction={ handleDeleteAction } />\r\n                    </Box>\r\n                )) \r\n            }\r\n        </Box> );\r\n}\r\n \r\n\r\nAppointmentListComponent.propTypes = {\r\n    appointmentList: PropTypes.array,\r\n    /**\r\n     * @ignore \r\n     */\r\n    classes: PropTypes.object.isRequired\r\n}\r\nexport { AppointmentListComponent }","import React, { useState, useEffect } from 'react';\n\n//Import components\nimport { Form } from \"../Form\";\nimport { AppointmentList } from \"../AppointmentList\";\n\n// Import material UI\nimport Typography from \"@material-ui/core/Typography\";\nimport { Box, Grid, Container } from '@material-ui/core';\n\nconst App = () => {\n\n  // Appointment in the local storage\n  let initialAppointments = JSON.parse(localStorage.getItem('appointments'));\n  if (!initialAppointments){\n    initialAppointments = [];\n  }\n\n  // Appointment list\n  const [appointmentList, setAppointmentList] = useState(initialAppointments);\n\n  const handleCreateNewAppointment = appointment => {\n    setAppointmentList([...appointmentList, appointment])\n  }\n\n  useEffect(() => {\n    if (initialAppointments){\n      localStorage.setItem('appointments', JSON.stringify(appointmentList));\n    } else {\n      localStorage.setItem('appointments', JSON.stringify([]));\n    }\n  }, [appointmentList, initialAppointments]);\n  return (\n    <>\n      <Typography variant='h6' align=\"center\" style={{fontSize:'28px'}}>Appointment Manager</Typography>\n      <Container maxWidth='md'>\n        <Box>\n          <Grid container>\n            <Grid item xs={6}>\n              <Form  createAppointment={handleCreateNewAppointment}/>\n            </Grid>\n            <Grid item xs={6}>\n              <AppointmentList appointmentList={appointmentList} updateAppointmentListState={setAppointmentList} />\n            </Grid>\n          </Grid>\n        </Box>\n      </Container>\n    </>\n  );\n}\n\nexport {App};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}